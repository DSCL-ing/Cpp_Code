
阿帕网 arpanet
  阿帕网为美国国防部高级研究计划署开发的世界上第一个运营的封包交换网络，它是全球互联网的始祖。


局域网 LAN(Local Area Network ):通过路由器和交换机把计算机连接在一起
广域网 WAN(Wide Area Network )
//广域网和局域网没有明显的界限,是一个相对的概念,一般把只经过交换机,而不经过路由器的网络称为局域网.经过路由器的叫广域网



$$  网络效应 network effect（也称网络外部性 network externality 或需求方规模经济 demand-side economies of scale)，
是一个经济学和商业方面的术语，用于描述对于一个产品（或服务），每增多一名用户，都会对该产品的其他用户产生新的价值。
当网络效应出现时，产品（或服务）的价值，会随着使用该产品（或服务）的人数的增加而增加。
/*
一个经典的例子是电话，越多的人使用电话，对每个电话使用者的价值就越大。
     一部电话的使用者，本来无意为其他用户创造价值，但当大家都购买电话时，这个行为就产生了正外部性。
像微信、微博、Twitter、Facebook 这样的线上社交网络，也是一样，随着更多用户的加入，每个用户获得的价值都在增加。
当网络的价值越来越大，越来越多的人加入时，网络效应还会带来从众效应，从而形成正反馈循环。
     网络效应这一表述不仅适用于正向的网络外部性，如电话的案例；消极的网络外部性也可能发生，即用户越多，产品的价值就越低，
这种情况通常被称为“拥堵”，例如交通拥堵或网络拥堵。
*/

网络技术盈利方式较少,大多数都是一套标准,谁做的好就用谁的






$$ 协议
"协议"是一种约定,遵守协议能够大大减少沟通成本

$$ 网络协议初识
//目前最主流的协议是TCP/IP协议



 
$$ 网络协议的层状结构

来源:传输举例变长,产生各种问题
1.长距离传输,数据异常的问题(丢失)
2.如何定位一台主机
3.怎么进行数据转发,和路径选择(路由,中间主机...)
4.01010...01等硬件级别的协议 

上面的问题,是有先后上下起因关系的 ,如传输数据前必须先定位主机位置.如何传输,用什么方式...
    ---> 因此我们可以在设计的时候将不同的功能模块设计成不同的模块,并根据先后上下关系,最终设计成层状结构


// 继承体系也是一种软件分层
//任何计算机问题都可以在中间加一层软件层来解决 ---> 软件分层在软件中很常见

软件分层之后,每一层都只关注自己同层的功能,只使用下层的接口,任何一层出现问题,都不会直接影响另一层,减少后期开发者的维护成本
    软件出现问题后,工程师一般会先定位问题在哪一层,然后再解决问题.
    ---> 高内聚,低耦合



$ OSI七层模型
OSI（Open System Interconnection，开放系统互连）七层网络模型称为开放式系统互联参考模型，是一个逻辑上的定义和规范;
OSI把网络从逻辑上分为了7层. 每一层都有相关、相对应的物理设备，比如路由器，交换机;
OSI 七层模型是一种框架性的设计方法，其最主要的功能使就是帮助不同类型的主机实现数据传输; 
    .它的最大优点是将服务、接口和协议这三个概念明确地区分开来，概念清楚，理论也比较完整. 
通过七个层次化的结构模型使不同的系统不同的网络之间实现可靠的通讯;
但是, 它既复杂又不实用; 所以我们按照TCP/IP四层模型来讲解.


//实际实现时,把5-会话层,6-表示层,7-应用层 合并成1层:5-应用层
TCP/IP五层模型包括了物理层(硬件),四层模式不包括物理层(通常)

$$ TCP/IP五层(或四层)模型
TCP/IP是一组协议的代名词，它还包括许多协议，组成了TCP/IP协议簇. 
TCP/IP通讯协议采用了5层的层级结构，每一层都呼叫它的下一层所提供的网络来完成自己的需求.
    .物理层: 负责光/电信号的传递方式. 比如现在以太网通用的网线(双绞 线)、早期以太网采用的的同轴电缆
(现在主要用于有线电视)、光纤, 现在的wifi无线网使用电磁波等都属于物理层的概念。物理层的能力决
定了最大传输速率、传输距离、抗干扰性等. 集线器(Hub)工作在物理层.
    .数据链路层: 负责设备之间的数据帧的传送和识别. 例如网卡设备的驱动、帧同步(就是说从网线上检测
到什么信号算作新帧的开始)、冲突检测(如果检测到冲突就自动重发)、数据差错校验等工作. 有以太
网、令牌环网, 无线LAN等标准. 交换机(Switch)工作在数据链路层.
    .网络层: 负责地址管理和路由选择. 例如在IP协议中, 通过IP地址来标识一台主机, 并通过路由表的方式规
划出两台主机之间的数据传输的线路(路由). 路由器(Router)工作在网路层.
    .传输层: 负责两台主机之间的数据传输. 如传输控制协议 (TCP), 能够确保数据可靠的从源主机发送到目标主机.
    .应用层: 负责应用程序间沟通，如简单电子邮件传输（SMTP）、文件传输协议（FTP）、网络远程访问
协议（Telnet）等. 我们的网络编程主要就是针对应用层

物理层我们考虑的比较少. 因此很多时候也可以称为 TCP/IP四层模型.
一般而言
对于一台主机, 它的操作系统内核实现了从传输层到物理层的内容;
对于一台路由器, 它实现了从网络层到物理层;
对于一台交换机, 它实现了从数据链路层到物理层;
对于集线器, 它只实现了物理层;
但是并不绝对. 很多交换机也实现了网络层的转发; 很多路由器也实现了部分传输层的内容(比如端口转发);



// 这些网络分层结构就是协议栈 -- 网络协议栈

   
用户层                    ...                     | 应用层
   |-----------------------------------------------------------------
sys_call      文件系统调用  键盘  显示器  ...     | 网络系统调用
   |----------------------------------------------------------------
   |                                              | 传输层    (TCP协议)
  OS       进程管理 文件系统  内存管理 驱动管理...| 网络层    (IP协议)
   |-----------------------------------------------------------------
 驱动   键盘驱动  显示器驱动  声卡  ...           |  网卡驱动 (数据链路层)
   |-----------------------------------------------------------------
 硬件   键盘       显示器     声卡  ...           |    网卡   (物理层)


网络也是属于OS一部分,OS和网络不分家

网络协议栈最核心的部分是属于操作系统的部分 传输层(TCP协议)和网络层(IP协议) . 所以一般以TCP/IP协议栈命名

linux中一切皆文件,网络在linux中也不例外.在linux系统中隶属于文件系统模块

OS有很多款,但网络只能有1种(网络指TCP/IP层,且必须是一样的).

数据链路层是有多种标准的,最常见的是以太网.
    为什么有多种标准? 局域网环境不同,硬件实现 等不同而不同


物理层是基础
数据链路层是丰富
网络层重点是提供了能力,但有能力传输,但不一定可靠
传输层重点是"可靠"传输
应用层是使用数据,根据不同场景有不同的实现(应用程序).

一般而言,上层的一定有下层的所有功能,下层的一般不会有上层的功能.
如路由器一般工作在网络层,但有些路由器具备应用层的功能







1.同一个局域网(子网)
    同一个局域网的两台机器,可以直接通信.如cs局域网联机.如一条网线连接两台电脑可以识别...
实质:两个主机通信的实质是,两个主机的OS在通过网络协议栈进行通信

网络协议栈的每一层,都要有自己的协议.
协议的表现形式:报头/协议报头

报文:报头+有效载荷

//在物流体系中:物流的主体是快递单+商品. 快递单是报头,商品是数据

用户向另一台主机发送数据的过程:
把数据从应用层,层层往下传,每一层都会把上一层发来的数据加工/封装(加上自己的报头),依次传到物理层,发送给另一台主机的硬件(物理层),然后层层往上传

接收数据的过程:
数据从物理层接收到后,将数据层层往上传,每一层都会把自己所在层的报头去掉,把有效载荷传给上一层

逻辑上,同层协议,都认为自己在和对方的同层协议在通信

同一层都能够互相认识对方的报头,所以
a.能将报头和有效载荷进行分离
b.将有效载荷交付给上一层的哪个具体协议 --- 数据包分用功能
//这是每层协议都要有的公共功能




有效载荷:对每一层所接收到的上一层数据叫做"有效载荷",有效载荷是上一层交付给自己的数据
每一层的协议 = 自己的报头+有效载荷



发送:自顶向下 --- 封装
接收:自底向上 --- 解包+分用




局域网的一般原理: 主机向局域网内发数据,其他的所有主机都能收到.其他主机通过不同的抓包方式,获取需要的数据包,从而达到通信

过滤模式:把不是发给自己的数据包丢弃掉     -- 常规
混杂模式:把局域网内抓到的所有包都收集起来 -- 抓包软件的抓包原理,把网卡的工作模式设为混杂


局域网的数据碰撞问题:数据量大了,冲突的概率变大,导致系统处理不过来...


局域网中,任何时刻,只允许一个人在向局域网发送消息?

任何人要通信,需要有唯一的一个标识符
对机器也是如此,每台机器都配有网卡,网卡在出产时,就在网卡内部写入了sn号(出产序列号,机器码、认证码、注册申请码等)
每块网卡出厂时，都预先分配了一个全球唯一的 MAC地址 ，并烧进硬件。 不管后来网卡身处何处，接入哪个网络，MAC 地址均不变。 
当然，某些操作系统也允许修改网卡的 MAC 地址。


MAC网络协议中的链路层地址，又称物理地址，有兴趣查查网络七层协议，ID一般指的是这个设备的编号或者名字，
而SN是这个设备的序列号， 一般是设备厂商用来唯一标识这个设备用的，就跟身份证号一样

局域网通过mac地址来识别










网卡管理
Linux 上有不少工具命令可以查看系统当前接入的网卡以及每张网卡的详细信息。

首先是 ifconfig 命令，他默认显示已启用的网卡，详情中可以看到每张网卡的物理地址：

fasion@u2004 [ ~ ]  ➜ ifconfig
enp0s3: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 10.0.2.15  netmask 255.255.255.0  broadcast 10.0.2.255
        inet6 fe80::a00:27ff:fe49:50dd  prefixlen 64  scopeid 0x20<link>
        ether 08:00:27:49:50:dd  txqueuelen 1000  (Ethernet)
        RX packets 3702  bytes 4881568 (4.8 MB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 538  bytes 42999 (42.9 KB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

enp0s8: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.56.2  netmask 255.255.255.0  broadcast 192.168.56.255
        inet6 fe80::a00:27ff:fe56:831c  prefixlen 64  scopeid 0x20<link>
        ether 08:00:27:56:83:1c  txqueuelen 1000  (Ethernet)
        RX packets 4183  bytes 1809871 (1.8 MB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 2674  bytes 350013 (350.0 KB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10<host>
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 679  bytes 1510416 (1.5 MB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 679  bytes 1510416 (1.5 MB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
例子中，系统总共有 3 块已启用网卡，名字分别是 enp0s3 、 enp0s8 以及 lo 。其中 lo 是环回网卡，用于本机通讯。ether 08:00:27:49:50:dd 表明，网卡 enp0s3 的物理地址是 08:00:27:49:50:dd 。

请注意，ifconfig 是一个比较老旧的命令，正在慢慢淡出历史舞台。
ip 命令也可以查看系统网卡信息，默认显示所有网卡：

fasion@u2004 [ ~ ]  ➜ ip link
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
2: enp0s3: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000
    link/ether 08:00:27:49:50:dd brd ff:ff:ff:ff:ff:ff
3: enp0s8: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000
    link/ether 08:00:27:56:83:1c brd ff:ff:ff:ff:ff:ff
ip 命令输出信息比较紧凑， link/ether 08:00:27:49:50:dd 这行展示网卡的物理地址。

ip 命令是一个比较新的命令，功能非常强大。它除了可以用于管理网络设备，还可以用于管理路由表，策略路由以及各种隧道。因此，推荐重点学习掌握 ip 命令的用法。







2.跨一个路由器的两个子网

$ 认识路由器:
   工作层:
    3.网络层 --- 首先工作在网络层,所以要有网络层的功能,然后下层的所有功能也都要有
    2.数据链路层
    1.物理层
路由器也是一台主机(通常称为节点),路由器一定要有路由的功能,即跨网络转发,所以路由器至少要级联两个子网,所以至少要有两个网络接口(两个以上接口)
//路由器就是把不同局域网连接起来的工具

// 令牌环:有token的主机才能发送数据包,也能保证任何时刻只能允许一台主机发送数据包.和以太网是两种不同的通信标准,不同的数据链路层的实现方案.

表示一台主机,用IP地址,能表示主机在公网环境的唯一性

目前是IPV4 ---> 4字节的整数,每个字节表示一个整数,范围是0-255
取值范围:[0.0.0.0 , 255,255,255,255] , 如192.168.x.y ,这种一般是字符串风格(点分十进制)表现的,用于给人看
int srcIP = XXX;
struct ip *p = (struct ip*)&srcip;
p->part1; //ip的第一部分
p->part2; //ip的第二部分
...

数据链路层有路由表,IP协议会判断主机是否在当前局域网内,如果不在才会发送给路由器 (默认路由)


题目描述：
实现函数将 unsigned int 整型数值转为点分十进制记法表示：
点分十进制（Dotted Decimal Notation）全称为点分（点式）十进制表示法，
是IPv4的IP地址标识方法。
IPv4中用四个字节表示一个IP地址，每个字节按照十进制表示为0~255。
点分十进制就是用4个从0~255的数字，来表示一个IP地址。
char * my_DotDec(unsigned int ip,char *buffer);
参数说明：
value：欲转换的数数值。
buffer：目标字符串的地址。
示例： ip = 2148205343; buffer = “128.11.3.31”;

分析：
灵活地利用联合体内存共享的特点
题目中要求将数字转换成字符串，我们就要想到使用sprintf函数，
union IPNode
{
 unsigned int addr;
 struct
 {
  unsigned char part1;
  unsigned char part2;
  unsigned char part3;
  unsigned char part4;
 };
};
char* my_DotDec(unsigned int ip,char *buffer)
{
 IPNode x;
 x.addr = ip;      
 sprintf(buffer,"%d.%d.%d.%d",x.s4,x.s3,x.s2,x.s1); 
 return buffer;         
}
注意事项:
windows系统下栈是在低地址，堆在高地址，栈和堆从中间向两头扩展，LINUX系统上是从两头向中间扩展，
pc端是小端–低地址存放低数据而x又是从堆上开辟的(因为结构体的定义是在函数的外面，
如果结构体定义在函数内部就是从栈上开辟)，堆是由低地址向高地址开辟内存，
所以s4在高地址，存放的是大数据。sprintf函数的第一个参数是字符串的输入指向char指针型，
第二个参数是控制输入的字符的形式(%d,%f,%0x,%x)，用“ ”括起来，第三个参数是输入的数据。












