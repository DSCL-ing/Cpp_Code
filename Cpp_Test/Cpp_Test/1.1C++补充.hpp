#pragma once


//C++中的类型转换static_cast、dynamic_cast、const_cast和reinterpret_cast


//C++中const类--->类所有成员都不能修改,比方string
//	但是类内指向的堆空间呢?


//通常说的返回值,返回临时对象,比较小的一般存放在寄存器中,也可能是其他
    // 比较大,如类,结构体等的通常放在上一层栈帧(调用栈),如main中调用func,func返回的临时对象就放在main函数栈帧内.所以销毁不影响返回的值


/*
C++的访问修饰符(public,private等)的作用是以不同的类为单位
私有是为了实现“对外”的信息隐藏，或者说保护，在类自己内部 ,允许访问同类型的私有变量,但不能访问其他类型的私有成员

对内对外是只类域内和类域外(一般是栈) ,在栈域不能访问类域内的私有,

对堆来说,使用指针进行管理资源.权限对指针约束有限.只有少数权限能约束指针的一部分操作,如const指针能够约束一层的修改.但不能阻止delete等操作
    其实就是堆不会释放,且只能通过指针来管理,没有那么多限制.栈上逻辑比较多,受约束也比较多


1.如果在类内私有了构造函数和析构函数,则对象将无法正常定义和析构
原因:编译器会在对象定义时自动调用构造函数,在析构时自动调用析构函数.--
    --但类外并不能够访问类域内的私有函数,所以无法正常定义对象,导致出现问题


区和域的概念: 区是实际的物理空间区,域是一个访问范围,有命名空间域,类内域和类外域,还有函数内部域,全局域,等等
    类外域是类内域之外的其他域的总和,一般的权限问题在于类外域和类内域

*/



/*  类的实例化
https://www.cnblogs.com/lvvou/p/14974734.html
    尽量给类编写构造函数并进行一系列的初始化和赋值操作，不要依赖系统默认未定义行为。
    
*/


// 不是常见的C++语法,都有可能是不明确,不统一,不规范的行为. //尽量避免


